type User {
    id: ID!
    username: String!
    email: String!
    email_verified_at: DateTime
    role_id: Int!
    status: String!
    last_login: DateTime
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    
    # Relations
    role: Role! @belongsTo
    dosen: Dosen @hasOne
    mahasiswa: Mahasiswa @hasOne
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
    role_id: Int!
    status: String
}

input UpdateUserInput {
    id: Int
    username: String
    email: String
    password: String
    role_id: Int
    status: String
}

type UserPaginator {
    data: [User]!
    paginatorInfo: PageInfo!
}

type PageInfo {
    hasMorePages: Boolean!
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

extend type Query{
    allUsers: [User!]! @all(model: "User\\User")
    user(id: ID! @eq(key: "id")): User @find(model: "User\\User")
    allUserPaginate(
            search: String
            first: Int
            page: Int
        ): UserPaginator @field(resolver: "App\\GraphQL\\User\\Queries\\UserQuery@all")   
    userByNama(
        nama: String! @where(operator: "like", key: "username")
    ): [User]! @all(model: "User\\User")
}

extend type Mutation {
  createUser(input: CreateUserInput! @spread): User
    @create(model: "User\\User")

  updateUser(
    id: ID! @eq(key: "id"),
    input: UpdateUserInput! @spread
  ): User
    @update(model: "User\\User")

  deleteUser(id: ID! @eq(key: "id")): User
    @delete(model: "User\\User")

  restoreUser(id: ID!): User
    @field(resolver: "User\\Mutations\\UserMutation@restore")

  forceDeleteUser(id: ID!): User
    @field(resolver: "User\\Mutations\\UserMutation@forceDelete")
}
