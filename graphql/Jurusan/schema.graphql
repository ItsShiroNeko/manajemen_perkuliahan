type Jurusan {
    id: ID!
    kode_jurusan: String!
    nama_jurusan: String!
    fakultas_id: Int!
    jenjang: String!
    akreditasi: String  
    kaprodi: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    
    # Relations
    fakultas: Fakultas! @belongsTo
    dosen: [Dosen!]! @hasMany
    mahasiswa: [Mahasiswa!]! @hasMany
    mataKuliah: [MataKuliah!]! @hasMany
}

input CreateJurusanInput {
    kode_jurusan: String!
    nama_jurusan: String!
    fakultas_id: Int!
    jenjang: String!
    akreditasi: String
    kaprodi: String
}

input UpdateJurusanInput {
    id: Int
    kode_jurusan: String
    nama_jurusan: String
    fakultas_id: Int
    jenjang: String
    akreditasi: String
    kaprodi: String
}

type JurusanPaginator {
    data: [Jurusan]!
    paginatorInfo: PageInfo!
}

type PageInfo {
    hasMorePages: Boolean!
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

extend type Query{
    allJurusan: [Jurusan!]! @all(model: "Jurusan\\Jurusan")
    jurusan(id: ID! @eq(key: "id")): Jurusan @find(model: "Jurusan\\Jurusan")
    allJurusanPaginate(
            search: String
            first: Int
            page: Int
        ): JurusanPaginator @field(resolver: "Jurusan\\Queries\\JurusanQuery@all")   
    jurusanByNama(
        nama_jurusan: String! @where(operator: "like", key: "nama_jurusan")
    ): [Jurusan]! @all(model: "Jurusan\\Jurusan")
}

extend type Mutation {
  createJurusan(input: CreateJurusanInput! @spread): Jurusan
    @create(model: "Jurusan\\Jurusan")

  updateJurusan(
    id: ID! @eq(key: "id"),
    input: UpdateJurusanInput! @spread
  ): Jurusan
    @update(model: "Jurusan\\Jurusan")

  deleteJurusan(id: ID! @eq(key: "id")): Jurusan
    @delete(model: "Jurusan\\Jurusan")

  restoreJurusan(id: ID!): Jurusan
    @field(resolver: "Jurusan\\Mutations\\JurusanMutation@restore")

  forceDeleteJurusan(id: ID!): Jurusan
    @field(resolver: "Jurusan\\Mutations\\JurusanMutation@forceDelete")
}
