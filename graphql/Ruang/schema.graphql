type Ruangan {
    id: ID!
    kode_ruang: String!
    nama_ruang: String!
    gedung: String
    lantai: Int!
    kapasitas: Int!
    jenis_ruang: String!
    fasilitas: String
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    
    # Relations
    jadwalKuliah: [JadwalKuliah!]! @hasMany
}

input CreateRuanganInput {
    kode_ruang: String!
    nama_ruang: String!
    gedung: String
    lantai: Int
    kapasitas: Int!
    jenis_ruang: String
    fasilitas: String
}

input UpdateRuanganInput {
    id: Int
    kode_ruang: String
    nama_ruang: String
    gedung: String
    lantai: Int
    kapasitas: Int
    jenis_ruang: String
    fasilitas: String
}

type RuanganPaginator {
    data: [Ruangan]!
    paginatorInfo: PageInfo!
}

type PageInfo {
    hasMorePages: Boolean!
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

extend type Query{
    allRuang: [Ruang!]! @all(model: "Ruang\\Ruang")
    ruang(id: ID! @eq(key: "id")): Ruang @find(model: "Ruang\\Ruang")
    allRuangPaginate(
            search: String
            first: Int
            page: Int
        ): RuangPaginator @field(resolver: "Ruang\\Queries\\RuangQuery@all")   
    ruangByKode(
        nama: String! @where(operator: "like", key: "kode")
    ): [Ruang]! @all(model: "Ruang\\Ruang")
}

extend type Mutation {
  createRuang(input: CreateRuangInput! @spread): Ruang
    @create(model: "Ruang\\Ruang")

  updateRuang(
    id: ID! @eq(key: "id"),
    input: UpdateRuangInput! @spread
  ): Ruang
    @update(model: "Ruang\\Ruang")

  deleteRuang(id: ID! @eq(key: "id")): Ruang
    @delete(model: "Ruang\\Ruang")

  restoreRuang(id: ID!): Ruang
    @field(resolver: "Ruang\\Mutations\\RuangMutation@restore")

  forceDeleteRuang(id: ID!): Ruang
    @field(resolver: "Ruang\\Mutations\\RuangMutation@forceDelete")
}
