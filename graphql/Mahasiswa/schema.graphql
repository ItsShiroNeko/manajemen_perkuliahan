type Mahasiswa {
    id: ID!
    user_id: Int!
    nim: String!
    nama_lengkap: String!
    jurusan_id: Int!
    angkatan: Int!
    jenis_kelamin: String!
    tempat_lahir: String
    tanggal_lahir: DateTime
    alamat: String
    no_hp: String
    email_pribadi: String
    nama_ayah: String
    nama_ibu: String
    no_hp_ortu: String
    status: String!
    semester_saat_ini: Int!
    ipk: Float!
    total_sks: Int!
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    
    user: User! @belongsTo
    jurusan: Jurusan! @belongsTo
    krs: [Krs!]! @hasMany
    khs: [Khs!]! @hasMany
}

input CreateMahasiswaInput {
    user_id: Int!
    nim: String!
    nama_lengkap: String!
    jurusan_id: Int!  
    angkatan: Int!
    jenis_kelamin: String!
    tempat_lahir: String
    tanggal_lahir: DateTime
    alamat: String
    no_hp: String
    email_pribadi: String
    nama_ayah: String
    nama_ibu: String
    no_hp_ortu: String
    status: String
    semester_saat_ini: Int
    ipk: Float
    total_sks: Int
}

input UpdateMahasiswaInput {
    id: Int
    user_id: Int
    nim: String
    nama_lengkap: String
    jurusan_id: Int
    angkatan: Int
    jenis_kelamin: String
    tempat_lahir: String
    tanggal_lahir: DateTime
    alamat: String
    no_hp: String
    email_pribadi: String
    nama_ayah: String
    nama_ibu: String
    no_hp_ortu: String
    status: String
    semester_saat_ini: Int
    ipk: Float
    total_sks: Int
}

type MahasiswaPaginator {
    data: [Mahasiswa]!
    paginatorInfo: PageInfo!
}

type PageInfo {
    hasMorePages: Boolean!
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

extend type Query{
    allMahasiswa: [Mahasiswa!]! @all(model: "Mahasiswa\\Mahasiswa")
    mahasiswa(id: ID! @eq(key: "id")): Mahasiswa @find(model: "Mahasiswa\\Mahasiswa")
    allMahasiswaPaginate(
            search: String
            first: Int
            page: Int
        ): MahasiswaPaginator @field(resolver: "App\\GraphQL\\Mahasiswa\\Queries\\MahasiswaQuery@all") 
        allMahasiswaArsip(
        search: String
        first: Int
        page: Int
    ): MahasiswaPaginator @field(resolver: "App\\GraphQL\\Mahasiswa\\Queries\\MahasiswaQuery@allArsip")
    mahasiswaByNama(
        nama_lengkap: String! @where(operator: "like", key: "nama_lengkap")
    ): [Mahasiswa]! @all(model: "Mahasiswa\\Mahasiswa")
}

extend type Mutation {
  createMahasiswa(input: CreateMahasiswaInput! @spread): Mahasiswa
    @create(model: "Mahasiswa\\Mahasiswa")

  updateMahasiswa(
    id: ID! @eq(key: "id"),
    input: UpdateMahasiswaInput! @spread
  ): Mahasiswa
    @update(model: "Mahasiswa\\Mahasiswa")

  deleteMahasiswa(id: ID! @eq(key: "id")): Mahasiswa
    @delete(model: "Mahasiswa\\Mahasiswa")

  restoreMahasiswa(id: ID!): Mahasiswa
    @field(resolver: "Mahasiswa\\Mutations\\MahasiswaMutation@restore")

  forceDeleteMahasiswa(id: ID!): Mahasiswa
    @field(resolver: "Mahasiswa\\Mutations\\MahasiswaMutation@forceDelete")
}
